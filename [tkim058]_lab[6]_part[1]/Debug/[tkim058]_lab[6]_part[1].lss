
[tkim058]_lab[6]_part[1].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2b  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  000019d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000508  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000027e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a9 c0       	rjmp	.+338    	; 0x188 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	25 d1       	rcall	.+586    	; 0x30e <main>
  c4:	47 c1       	rjmp	.+654    	; 0x354 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_Cursor>:
 100:	81 31       	cpi	r24, 0x11	; 17
 102:	18 f4       	brcc	.+6      	; 0x10a <LCD_Cursor+0xa>
 104:	81 58       	subi	r24, 0x81	; 129
 106:	f3 cf       	rjmp	.-26     	; 0xee <LCD_WriteCommand>
 108:	08 95       	ret
 10a:	81 55       	subi	r24, 0x51	; 81
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret

00000110 <LCD_init>:
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	d9 df       	rcall	.-78     	; 0xc8 <delay_ms>
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	ea df       	rcall	.-44     	; 0xee <LCD_WriteCommand>
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	e8 df       	rcall	.-48     	; 0xee <LCD_WriteCommand>
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	e6 df       	rcall	.-52     	; 0xee <LCD_WriteCommand>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	e4 df       	rcall	.-56     	; 0xee <LCD_WriteCommand>
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ce cf       	rjmp	.-100    	; 0xc8 <delay_ms>
 12c:	08 95       	ret

0000012e <LCD_WriteData>:
 12e:	5e 9a       	sbi	0x0b, 6	; 11
 130:	88 b9       	out	0x08, r24	; 8
 132:	5f 9a       	sbi	0x0b, 7	; 11
 134:	00 00       	nop
 136:	5f 98       	cbi	0x0b, 7	; 11
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	c5 cf       	rjmp	.-118    	; 0xc8 <delay_ms>
 13e:	08 95       	ret

00000140 <TimerOn>:
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 146:	8d e7       	ldi	r24, 0x7D	; 125
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 15c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 164:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 168:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 16c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 170:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 174:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 178:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 17c:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 180:	8f b7       	in	r24, 0x3f	; 63
 182:	80 68       	ori	r24, 0x80	; 128
 184:	8f bf       	out	0x3f, r24	; 63
 186:	08 95       	ret

00000188 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 19a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 19e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 1a2:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 1a6:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1b4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1b8:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1bc:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 1c0:	89 2b       	or	r24, r25
 1c2:	8a 2b       	or	r24, r26
 1c4:	8b 2b       	or	r24, r27
 1c6:	99 f4       	brne	.+38     	; 0x1ee <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 1ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1da:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 1e2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 1e6:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 1ea:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 200:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 204:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 208:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 20c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 210:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 214:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 218:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 21c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 220:	08 95       	ret

00000222 <Cntr_SM_Tick>:
unsigned char led = 0x00;
unsigned char button = 0x00;

void Cntr_SM_Tick()
{//state transition
	switch(state)
 222:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	41 f1       	breq	.+80     	; 0x27a <Cntr_SM_Tick+0x58>
 22a:	28 f4       	brcc	.+10     	; 0x236 <Cntr_SM_Tick+0x14>
 22c:	88 23       	and	r24, r24
 22e:	49 f0       	breq	.+18     	; 0x242 <Cntr_SM_Tick+0x20>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	71 f0       	breq	.+28     	; 0x250 <Cntr_SM_Tick+0x2e>
 234:	54 c0       	rjmp	.+168    	; 0x2de <Cntr_SM_Tick+0xbc>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	a9 f1       	breq	.+106    	; 0x2a4 <Cntr_SM_Tick+0x82>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	09 f4       	brne	.+2      	; 0x240 <Cntr_SM_Tick+0x1e>
 23e:	46 c0       	rjmp	.+140    	; 0x2cc <Cntr_SM_Tick+0xaa>
 240:	4e c0       	rjmp	.+156    	; 0x2de <Cntr_SM_Tick+0xbc>
	{
		case Init:
		led = 0x07;
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <led>
		state = Release;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
		break;
 24e:	08 95       	ret
		
		case Release:
		if(button == 0x01)
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	21 f4       	brne	.+8      	; 0x260 <Cntr_SM_Tick+0x3e>
		{
			state = Inc;
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 25e:	52 c0       	rjmp	.+164    	; 0x304 <Cntr_SM_Tick+0xe2>
		}
		else if(button == 0x02)
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	21 f4       	brne	.+8      	; 0x26c <Cntr_SM_Tick+0x4a>
		{
			state = Dec;
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 26a:	44 c0       	rjmp	.+136    	; 0x2f4 <Cntr_SM_Tick+0xd2>
		}
		else if(button == 0x03)
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	09 f0       	breq	.+2      	; 0x272 <Cntr_SM_Tick+0x50>
 270:	4d c0       	rjmp	.+154    	; 0x30c <Cntr_SM_Tick+0xea>
		{
			state = zero;
 272:	84 e0       	ldi	r24, 0x04	; 4
 274:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 278:	42 c0       	rjmp	.+132    	; 0x2fe <Cntr_SM_Tick+0xdc>
			state = Release;
		}
		break;
		
		case Inc:
		if(button == 0x01)
 27a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	09 f4       	brne	.+2      	; 0x284 <Cntr_SM_Tick+0x62>
 282:	40 c0       	rjmp	.+128    	; 0x304 <Cntr_SM_Tick+0xe2>
		{
			state = Inc;
		}
		else if(button == 0x02)
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	21 f4       	brne	.+8      	; 0x290 <Cntr_SM_Tick+0x6e>
		{
			state = Dec;
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 28e:	32 c0       	rjmp	.+100    	; 0x2f4 <Cntr_SM_Tick+0xd2>
		}
		else if(button == 0x03)
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	21 f4       	brne	.+8      	; 0x29c <Cntr_SM_Tick+0x7a>
		{
			state = zero;
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 29a:	31 c0       	rjmp	.+98     	; 0x2fe <Cntr_SM_Tick+0xdc>
		}
		else
		{
			state = Release;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2a2:	08 95       	ret
		}
		break;
		
		case Dec:
		if(button == 0x02)
 2a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	21 f1       	breq	.+72     	; 0x2f4 <Cntr_SM_Tick+0xd2>
		{
			state = Dec;
		}
		else if(button == 0x01)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <Cntr_SM_Tick+0x96>
		{
			state = Inc;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2b6:	26 c0       	rjmp	.+76     	; 0x304 <Cntr_SM_Tick+0xe2>
		}
		else if(button == 0x03)
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <Cntr_SM_Tick+0xa2>
		{
			state = zero;
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2c2:	1d c0       	rjmp	.+58     	; 0x2fe <Cntr_SM_Tick+0xdc>
		}
		else
		{
			state = Release;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2ca:	08 95       	ret
		}
		break;
		
		case zero:
		if((button == 0x03) ||(button == 0x01))
 2cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	a1 f0       	breq	.+40     	; 0x2fe <Cntr_SM_Tick+0xdc>
		{
			state = Inc;
		}
		else
		{
			state = Release;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 2dc:	08 95       	ret
		}
		break;
		
		default:
		state = Init;
 2de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
		break;
 2e2:	08 95       	ret
		{
			break;
		}
		else
		{
			led++;
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <led>
		}
		break;
 2ea:	08 95       	ret
		{
			break;
		}
		else
		{
			led--;
 2ec:	81 50       	subi	r24, 0x01	; 1
 2ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <led>
		break;
		
		default:
		break;
	}
}
 2f2:	08 95       	ret
			led++;
		}
		break;
		
		case Dec:
		if(led == 0x00)
 2f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <led>
 2f8:	88 23       	and	r24, r24
 2fa:	41 f0       	breq	.+16     	; 0x30c <Cntr_SM_Tick+0xea>
 2fc:	f7 cf       	rjmp	.-18     	; 0x2ec <Cntr_SM_Tick+0xca>
			led--;
		}
		break;
		
		case zero:
		led = 0x00;
 2fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <led>
		break;
 302:	08 95       	ret
		
		case Release:
		break;
		
		case Inc:
		if(led == 0x09)
 304:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <led>
 308:	89 30       	cpi	r24, 0x09	; 9
 30a:	61 f7       	brne	.-40     	; 0x2e4 <Cntr_SM_Tick+0xc2>
 30c:	08 95       	ret

0000030e <main>:
	}
}

int main ( void )
{
	DDRA = 0x00; PORTA = 0xFF; // Input button
 30e:	11 b8       	out	0x01, r1	; 1
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 314:	87 b9       	out	0x07, r24	; 7
 316:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 318:	8a b9       	out	0x0a, r24	; 10
 31a:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(500);
 31c:	64 ef       	ldi	r22, 0xF4	; 244
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	6d df       	rcall	.-294    	; 0x200 <TimerSet>
	TimerOn();
 326:	0c df       	rcall	.-488    	; 0x140 <TimerOn>
 328:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
	
	state = Init;
	
	// Initializes the LCD display
	LCD_init ();
 32c:	f1 de       	rcall	.-542    	; 0x110 <LCD_init>
 32e:	80 b1       	in	r24, 0x00	; 0
	while (1)
	{
		button = ~PINA & 0x03;
 330:	80 95       	com	r24
 332:	83 70       	andi	r24, 0x03	; 3
 334:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		Cntr_SM_Tick();
 338:	74 df       	rcall	.-280    	; 0x222 <Cntr_SM_Tick>
 33a:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Cursor(1);
 33c:	e1 de       	rcall	.-574    	; 0x100 <LCD_Cursor>
 33e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <led>
		LCD_WriteData(led + '0');
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	f4 de       	rcall	.-536    	; 0x12e <LCD_WriteData>
 346:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TimerFlag>
		while(!TimerFlag){}
 34a:	88 23       	and	r24, r24
 34c:	e1 f3       	breq	.-8      	; 0x346 <main+0x38>
 34e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <TimerFlag>
		TimerFlag = 0;
 352:	ed cf       	rjmp	.-38     	; 0x32e <main+0x20>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
	}
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
